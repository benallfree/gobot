diff --git a/bin/plop.js b/bin/plop.js
index 288ed450cc92211a8375d16983fcfe9132ec58f9..00b17005d409381727de9ff845e1c20ca51a2b67 100644
--- a/bin/plop.js
+++ b/bin/plop.js
@@ -12,6 +12,9 @@ Plop.prepare(
     completion: argv.completion,
   },
   function (env) {
-    Plop.execute(env, run);
+    Plop.execute(env, (env, argv) => run(env, argv).catch( err => {
+      console.error(chalk.red("[ERROR]"), err.message);
+      process.exit(1);
+    }));
   },
 );
diff --git a/src/plop.d.ts b/src/plop.d.ts
index 0e31399ca75feda917d6765c07f286adc2c86004..95b8dd8626ba065b8ae1c175d8fc0e6db4c4a08a 100644
--- a/src/plop.d.ts
+++ b/src/plop.d.ts
@@ -12,6 +12,7 @@ export {
   PlopGenerator,
   NodePlopAPI,
   PlopGeneratorConfig,
+  Actions
 } from "node-plop";
 
 export const Plop: Liftoff;
diff --git a/src/plop.js b/src/plop.js
index 251c75eb892b9181b2128dedc5df9bbd23e40463..a2b3f332fd7d4fc95d79891b209d07c92766bcdb 100644
--- a/src/plop.js
+++ b/src/plop.js
@@ -60,7 +60,7 @@ async function run(env, _, passArgsBeforeDashes) {
       chalk.red("[PLOP] ") + "Something went wrong with reading your plop file",
       e,
     );
-    return;
+    throw e;
   }
   const generators = plop.getGeneratorList();
   const generatorNames = generators.map((v) => v.name);
@@ -73,44 +73,33 @@ async function run(env, _, passArgsBeforeDashes) {
   const runGeneratorByName = (name) => {
     const generator = plop.getGenerator(name);
     const bypassData = combineBypassData(generator, bypassArr, plopArgV);
-    doThePlop(generator, bypassData);
+    return doThePlop(generator, bypassData);
   };
 
   // hmmmm, couldn't identify a generator in the user's input
   if (!generators.length) {
     // no generators?! there's clearly something wrong here
-    console.error(chalk.red("[PLOP] ") + "No generator found in plopfile");
-    process.exit(1);
+    throw new Error("No generator found in plopfile");
   } else if (!generatorName && generators.length === 1) {
     // only one generator in this plopfile... let's assume they
     // want to run that one!
-    runGeneratorByName(generatorNames[0]);
+    await runGeneratorByName(generatorNames[0]);
   } else if (!generatorName && generators.length > 1 && !bypassArr.length) {
     // more than one generator? we'll have to ask the user which
     // one they want to run.
-    out
+    await out
       .chooseOptionFromList(generators, plop.getWelcomeMessage())
       .then(runGeneratorByName)
-      .catch((err) => {
-        console.error(
-          chalk.red("[PLOP] ") +
-            "Something went wrong with selecting a generator",
-          err,
-        );
-      });
   } else if (generatorNames.includes(generatorName)) {
     // we have found the generator, run it!
-    runGeneratorByName(generatorName);
+    await runGeneratorByName(generatorName);
   } else {
     // we just can't make sense of your input... sorry :-(
     const fuzzyGenName = (generatorName + " " + args.join(" ")).trim();
-    console.error(
-      chalk.red("[PLOP] ") +
-        'Could not find a generator for "' +
+    throw new Error('Could not find a generator for "' +
         fuzzyGenName +
         '"',
     );
-    process.exit(1);
   }
   return plop;
 }
@@ -120,13 +109,20 @@ async function run(env, _, passArgsBeforeDashes) {
 //
 function doThePlop(generator, bypassArr) {
   let failedActions = false;
-  generator
+  return generator
     .runPrompts(bypassArr)
     .then(async (answers) => {
       return answers;
     })
     .then((answers) => {
       const noMap = argv["show-type-names"] || argv.t;
+      const onProgress = (msg) => {
+        if(argv.progress) {
+          progressSpinner.text = msg
+        } else {
+          console.log(msg)
+        }
+      }
       const onComment = (msg) => {
         progressSpinner.info(msg);
         progressSpinner.start();
@@ -160,16 +156,12 @@ function doThePlop(generator, bypassArr) {
       };
       progressSpinner.start();
       return generator
-        .runActions(answers, { onSuccess, onFailure, onComment })
-        .then(() => {
+        .runActions(answers, { onSuccess, onFailure, onComment, onProgress })
+        .finally(() => {
           progressSpinner.stop();
-          if (failedActions) process.exit(1);
+          if (failedActions) throw new Error(`At least one action has failed.`);
         });
     })
-    .catch(function (err) {
-      console.error(chalk.red("[ERROR]"), err.message);
-      process.exit(1);
-    });
 }
 
 export { Plop, run, progressSpinner };
